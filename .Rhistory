y = "Valor",
color = "País") +
scale_x_continuous(breaks = seq(min(seleccion_long$ANIO), max(seleccion_long$ANIO), by = 10)) +  # Años de 10 en 10
scale_y_continuous(breaks = seq(floor(min(seleccion_long$FEC)), ceiling(max(seleccion_long$FEC)), by = 0.25)) +  # Incrementos de 0.25 en el eje y
scale_size_identity() +  # Mantiene los tamaños especificados
theme_minimal() +
geom_text(aes(x = 2022, y = valor_arg_2022, label = round(valor_arg_2022, 2)),
vjust = -1, color = "red")  # Añadir texto al lado de la línea
NAT <- read.csv("datos/NATALIDADDEIS2000-2022.csv") %>%
rename("ANIO" = "indice_tiempo") %>%
mutate(ANIO = as.integer(substr(ANIO, 1, 4))) %>%
rename_with(~ c("ANIO", "totalARG", "CABA", "Buenos Aires", "Catamarca", "Córdoba",
"Corrientes", "Chaco", "Chubut", "Entre Ríos", "Formosa", "Jujuy",
"La Pampa", "La Rioja", "Mendoza", "Misiones", "Neuquén", "Río Negro",
"Salta", "San Juan", "San Luis", "Santa Cruz", "Santa Fe",
"Santiago del Estero", "Tucumán", "Tierra del Fuego"),
.cols = everything())
# Reestructurar el dataframe de formato "wide" a "long"
NAT_long <- NAT %>%
pivot_longer(-ANIO, names_to = "PROVINCIA", values_to = "valor")
# Crear el gráfico de líneas
ggplot(NAT_long, aes(x = ANIO, y = valor, color = PROVINCIA, group = PROVINCIA)) +
geom_line() +
labs(title = "Gráfico de Múltiples Líneas",
x = "Tiempo",
y = "Valor",
color = "Variables") +
theme_minimal()
#MINIMO
NAT_long %>%
filter(ANIO==2000) %>%
filter(valor== min(valor))
#MAXIMO
NAT_long %>%
filter(ANIO==2000) %>%
filter(valor== max(valor))
#MINIMO
NAT_long %>%
filter(ANIO==2000) %>%
filter(valor== min(valor))
#MAXIMO
NAT_long %>%
filter(ANIO==2000) %>%
filter(valor== max(valor))
#AÑO 2022
#MINIMO
NAT_long %>%
filter(ANIO==2022) %>%
filter(valor== min(valor))
#MAXIMO
NAT_long %>%
filter(ANIO==2022) %>%
filter(valor== max(valor))
# Crear el gráfico de líneas
ggplot(NAT_long, aes(x = ANIO, y = valor, color = PROVINCIA, group = PROVINCIA)) +
geom_line(aes(size = ifelse(PROVINCIA %in% c("Misiones","CABA", "totalARG"), 1.5, 0.5))) +
labs(title = "Gráfico de Múltiples Líneas",
x = "Tiempo",
y = "Valor",
color = "Variables") +
theme_minimal()
ggplot(seleccion_long, aes(x = ANIO, y = FEC, color = `Country Name`, group = `Country Name`)) +
geom_line(aes(size = ifelse(`Country Name` %in% c("Argentina", "Mundo"), 1.5, 0.5))) +
geom_hline(yintercept = valor_arg_2022, linetype = "dashed", color = "red") +  # Línea horizontal de guía
labs(title = "Gráfico de Múltiples Líneas",
x = "Tiempo",
y = "Valor",
color = "País") +
scale_x_continuous(breaks = seq(min(seleccion_long$ANIO), max(seleccion_long$ANIO), by = 10)) +  # Años de 10 en 10
scale_y_continuous(breaks = seq(floor(min(seleccion_long$FEC)), ceiling(max(seleccion_long$FEC)), by = 0.25)) +  # Incrementos de 0.25 en el eje y
scale_size_identity() +  # Mantiene los tamaños especificados
theme_minimal() +
geom_text(aes(x = 2022, y = valor_arg_2022, label = round(valor_arg_2022, 2)),
vjust = -1, color = "red")  # Añadir texto al lado de la línea
# Crear el gráfico de líneas
ggplot(NAT_long, aes(x = ANIO, y = valor, color = PROVINCIA, group = PROVINCIA)) +
geom_line(aes(size = ifelse(PROVINCIA %in% c("Misiones","CABA", "totalARG"), 1.5, 0.5))) +
labs(title = "Gráfico de Múltiples Líneas",
x = "Tiempo",
y = "Valor",
color = "Variables") +
theme_minimal()
# Crear el gráfico de líneas
ggplot(NAT_long, aes(x = ANIO, y = valor, color = PROVINCIA, group = PROVINCIA)) +
geom_line(aes(size = ifelse(PROVINCIA %in% c("Misiones","CABA", "totalARG"), 1, 0.5))) +
labs(title = "Gráfico de Múltiples Líneas",
x = "Tiempo",
y = "Valor",
color = "Variables") +
theme_minimal()
# Crear el gráfico de líneas
ggplot(NAT_long, aes(x = ANIO, y = valor, color = PROVINCIA, group = PROVINCIA)) +
geom_line(aes(size = ifelse(PROVINCIA %in% c("Misiones","CABA", "totalARG"), 0.7, 0.5))) +
labs(title = "Gráfico de Múltiples Líneas",
x = "Tiempo",
y = "Valor",
color = "Variables") +
theme_minimal()
ggplot(NAT_long, aes(x = ANIO, y = valor, color = PROVINCIA, group = PROVINCIA)) +
geom_line(size = ifelse(NAT_long$PROVINCIA %in% c("Misiones", "CABA", "totalARG"), 0.7, 0.5),
show.legend = FALSE) +  # Eliminar leyenda para tamaño
labs(title = "Gráfico de Múltiples Líneas",
x = "Tiempo",
y = "Valor",
color = "Variables") +
theme_minimal()
ggplot(NAT_long, aes(x = ANIO, y = valor, color = PROVINCIA, group = PROVINCIA)) +
geom_line(aes(size = ifelse(PROVINCIA %in% c("Misiones", "CABA", "totalARG"), 1.5, 0.5)),
show.legend = FALSE) +  # Elimina leyenda para tamaño
scale_size_identity() +  # Mantiene los tamaños especificados
labs(title = "Gráfico de Múltiples Líneas",
x = "Tiempo",
y = "Valor",
color = "Variables") +
theme_minimal()
ggplot(NAT_long, aes(x = ANIO, y = valor, color = PROVINCIA, group = PROVINCIA)) +
geom_line(aes(size = ifelse(PROVINCIA %in% c("Misiones", "CABA", "totalARG"), 1.5, 0.5))) +
scale_size_identity() +  # Mantiene los tamaños especificados
labs(title = "Gráfico de Múltiples Líneas",
x = "Tiempo",
y = "Valor",
color = "Variables") +
theme_minimal()
ggplot(NAT_long, aes(x = ANIO, y = valor, color = PROVINCIA, group = PROVINCIA)) +
geom_line(aes(size = ifelse(PROVINCIA %in% c("Misiones", "CABA", "totalARG"), 1.5, 0.5))) +
scale_size_identity() +  # Mantiene los tamaños especificados
labs(title = "Gráfico de Múltiples Líneas",
x = "Tiempo",
y = "Valor",
color = "Variables") +
theme_minimal()+
guides(color = guide_legend(ncol = 1))
ggplot(seleccion_long, aes(x = ANIO, y = FEC, color = `Country Name`, group = `Country Name`)) +
geom_line(aes(size = ifelse(`Country Name` %in% c("Argentina", "Mundo"), 1.5, 0.5))) +
geom_hline(yintercept = valor_arg_2022, linetype = "dashed", color = "red") +  # Línea horizontal de guía
labs(title = "Gráfico de Múltiples Líneas",
x = "Tiempo",
y = "Valor",
color = "País") +
scale_x_continuous(breaks = seq(min(seleccion_long$ANIO), max(seleccion_long$ANIO), by = 10)) +  # Años de 10 en 10
scale_y_continuous(breaks = seq(floor(min(seleccion_long$FEC)), ceiling(max(seleccion_long$FEC)), by = 0.25)) +  # Incrementos de 0.25 en el eje y
scale_size_identity() +  # Mantiene los tamaños especificados
theme_minimal() +
geom_text(aes(x = 2022, y = valor_arg_2022, label = round(valor_arg_2022, 2)),
vjust = -1, color = "red")  # Añadir texto al lado de la línea
ggplot(NAT_long, aes(x = ANIO, y = valor, color = PROVINCIA, group = PROVINCIA)) +
geom_line(aes(size = ifelse(PROVINCIA %in% c("Misiones", "CABA", "totalARG"), 1.5, 0.5))) +
scale_size_identity() +  # Mantiene los tamaños especificados
labs(title = "Gráfico de Múltiples Líneas",
x = "Tiempo",
y = "Valor",
color = "Variables") +
theme_minimal()+
guides(color = guide_legend(ncol = 1))
View(NAC_ANUALES_PROV)
ggplot(NAC_ANUALES_PROV, aes(x = ANIO, y = TOTAL, color = PROVINCIA, group = PROVINCIA)) +
geom_line(aes(size = ifelse(PROVINCIA %in% c("Misiones", "CABA"), 1.5, 0.5))) +
scale_size_identity() +  # Mantiene los tamaños especificados
labs(title = "Gráfico de Múltiples Líneas",
x = "Tiempo",
y = "Valor",
color = "Variables") +
theme_minimal()+
guides(color = guide_legend(ncol = 1))
ggplot(NAC_ANUALES_PROV, aes(x = ANIO, y = TOTAL, color = PROVINCIA, group = PROVINCIA)) +
geom_line(aes(size = ifelse(PROVINCIA %in% c("Misiones", "CABA","Buenos Aires"), 1.5, 0.5))) +
scale_size_identity() +  # Mantiene los tamaños especificados
labs(title = "Gráfico de Múltiples Líneas",
x = "Tiempo",
y = "Valor",
color = "Variables") +
theme_minimal()+
guides(color = guide_legend(ncol = 1))
ggplot(seleccion_long, aes(x = ANIO, y = FEC, color = `Country Name`, group = `Country Name`)) +
geom_line(aes(size = ifelse(`Country Name` %in% c("Argentina", "Mundo"), 1.5, 0.5))) +
geom_hline(yintercept = valor_arg_2022, linetype = "dashed", color = "red") +  # Línea horizontal de guía
labs(title = "Gráfico de Múltiples Líneas",
x = "Tiempo",
y = "Valor",
color = "País") +
scale_x_continuous(breaks = seq(min(seleccion_long$ANIO), max(seleccion_long$ANIO), by = 10)) +  # Años de 10 en 10
scale_y_continuous(breaks = seq(floor(min(seleccion_long$FEC)), ceiling(max(seleccion_long$FEC)), by = 0.25)) +  # Incrementos de 0.25 en el eje y
scale_size_identity() +  # Mantiene los tamaños especificados
theme_minimal() +
geom_text(aes(x = 2022, y = valor_arg_2022, label = round(valor_arg_2022, 2)),
vjust = -1, color = "red")  # Añadir texto al lado de la línea
View(FECBM)
View(Acumulada)
View(todocrudo)
View(FECBM)
View(SeleccionFECBM)
library(tidyverse)
library(ggplot2)
library(readxl)
ggplot(seleccion_long, aes(x = ANIO, y = FEC, color = `Country Name`, group = `Country Name`)) +
geom_line(aes(size = ifelse(`Country Name` %in% c("Argentina", "Mundo"), 1.5, 0.5))) +
geom_hline(yintercept = valor_arg_2022, linetype = "dashed", color = "red") +  # Línea horizontal de guía
labs(title = "Gráfico de Múltiples Líneas",
x = "Tiempo",
y = "Valor",
color = "País") +
scale_x_continuous(breaks = seq(min(seleccion_long$ANIO), max(seleccion_long$ANIO), by = 10)) +  # Años de 10 en 10
scale_y_continuous(breaks = seq(floor(min(seleccion_long$FEC)), ceiling(max(seleccion_long$FEC)), by = 0.25)) +  # Incrementos de 0.25 en el eje y
scale_size_identity() +  # Mantiene los tamaños especificados
theme_minimal() +
geom_text(aes(x = 2022, y = valor_arg_2022, label = round(valor_arg_2022, 2)),
vjust = -1, color = "red")  # Añadir texto al lado de la línea
ggplot(NAT_long, aes(x = ANIO, y = valor, color = PROVINCIA, group = PROVINCIA)) +
geom_line(aes(size = ifelse(PROVINCIA %in% c("Misiones", "CABA", "totalARG"), 1.5, 0.5))) +
scale_size_identity() +  # Mantiene los tamaños especificados
labs(title = "Gráfico de Múltiples Líneas",
x = "Tiempo",
y = "Valor",
color = "Variables") +
theme_minimal()+
guides(color = guide_legend(ncol = 1))
library(eph)
eph_data <- get_microdata(year = 2023, trimester = 2, type = "individual")
View(eph_data)
eph_data <- get_microdata(year = 2023, trimester = 3, type = "individual")
View(eph_data)
available_bases(year = 2024)
eph_data <- get_microdata(year = 2024, trimester = 3, type = "individual")
eph_data <- get_microdata(year = 2024, trimester = 2, type = "individual")
eph_data <- get_microdata(year = 2024, trimester = 1, type = "individual")
View(eph_data)
eph_data <- get_microdata(year = 2024, trimester = 1, type = "hogar")
View(eph_data)
eph_data %>%
group_by(AGLOMERADO,V8) %>%
summarise(cuantos=n())
eph_data %>%
group_by(AGLOMERADO,V8) %>%
summarise(cuantos=sum(PONDERA))
eph_data <- get_microdata(
year = 2024,
period = 1,
type = "hogar"
) %>%
organize_labels(.,
type = "hogar"
)
View(eph_data)
eph_data %>%
group_by(AGLOMERADO,V8) %>%
summarise(cuantos=sum(PONDERA))
calculate_tabulates(
base = eph_data,
x = "AGLOMERADO",
y = sum(PONDERA),
weights = "PONDERA",
add.totals = "row",
add.percentage = "col"
)
calculate_tabulates(
base = eph_data,
x = "AGLOMERADO",
y = "sum(PONDERA)",
weights = "PONDERA",
add.totals = "row",
add.percentage = "col"
)
eph_data %>%
group_by(AGLOMERADO,V8) %>%
summarise(cuantos=sum(PONDERA))
eph_data %>%
group_by(AGLOMERADO,V8) %>%
summarise(cuantos=sum(PONDERA)) %>%
view()
TABLAPEARSON<-read.csv("PEARSON_INDICADORES_2022")
TABLAPEARSON<-read.csv("PEARSON_INDICADORES_2022.csv")
TABLAPEARSON<-read.csv("datos/PEARSON_INDICADORES_2022.csv")
View(TABLAPEARSON)
TABLAPEARSON<-read.csv("datos/PEARSON_INDICADORES_2022.csv",encoding = "utf-8")
View(TABLAPEARSON)
TABLAPEARSON<-read.csv("datos/PEARSON_INDICADORES_2022.csv",encoding = "latin")
TABLAPEARSON<-read.csv("datos/PEARSON_INDICADORES_2022.csv",encoding = "UTF-8")
TRANSF<-TABLAPEARSON %>%
select(-"Código",-Poblacion,-superficie.Km2,-H_propietarios,-H_algun_nbi)
cor(transf)
cor(TRANSF)
View(TRANSF)
TRANSF<-TABLAPEARSON %>%
select(-Provincia,-Hogares,-"Código",-Poblacion,-superficie.Km2,-H_propietarios,-H_algun_nbi)
cor(TRANSF)
glimpse(TRANSF)
TRANSF <- lapply(TRANSF, function(x) as.numeric(as.character(x)))
glimpse(TRANSF)
TRANSF <- lapply(TRANSF, function(x) as.numeric(x))
glimpse(TRANSF)
TABLAPEARSON<-read.csv("datos/PEARSON_INDICADORES_2022.csv",encoding = "UTF-8")
TRANSF<-TABLAPEARSON %>%
select(-Provincia,-Hogares,-"Código",-Poblacion,-superficie.Km2,-H_propietarios,-H_algun_nbi)
TRANSF <- lapply(TRANSF, function(x) as.numeric(x))
glimpse(TRANSF)
TABLAPEARSON<-read_xlsx("datos/PEARSON_INDICADORES_2022.xlsx")
View(TABLAPEARSON)
TABLAPEARSON<-TABLAPEARSON %>%
select(-Provincia,-Hogares,-"Código",-Poblacion,-superficie.Km2,-H_propietarios,-H_algun_nbi)
glimpse(TABLA)
glimpse(TABLAPEARSON)
TABLAPEARSON<-TABLAPEARSON %>%
select(-Provincia,-Hogares,-"Código",-Poblacion,-`superficie Km2`-H_propietarios,-H_algun_nbi)
glimpse(TABLAPEARSON)
TABLAPEARSON<-TABLAPEARSON %>%
select(-Provincia,-Hogares,-Codigo,-Poblacion,-`superficie Km2`-H_propietarios,-H_algun_nbi)
glimpse(TABLAPEARSON)
TABLAPEARSON<-TABLAPEARSON %>%
select(-Provincia,-Hogares,-Codigo,-Poblacion,-`superficie Km2`-H_propietarios,-H_algun_nbi)
TABLAPEARSON<-read_xlsx("datos/PEARSON_INDICADORES_2022.xlsx")
TABLAPEARSON<-read_xlsx("datos/PEARSON_INDICADORES_2022.xlsx")
TABLAPEARSON<-TABLAPEARSON %>%
select(-Provincia,-Hogares,-Codigo,-Poblacion,-`superficie Km2`-H_propietarios,-H_algun_nbi)
TABLAPEARSON<-TABLAPEARSON %>%
select(-Provincia,-Hogares,-Codigo,-Poblacion,-superficie_Km2-H_propietarios,-H_algun_nbi)
glimpse(TABLAPEARSON)
TABLAPEARSON<-TABLAPEARSON %>%
select(-Provincia,-Hogares,-Codigo,-Poblacion,-H_propietarios,-H_algun_nbi)
glimpse(TABLAPEARSON)
TABLAPEARSON<-TABLAPEARSON %>%
select(-superficie_Km2)
glimpse(TABLAPEARSON)
cor(TRANSF)
cor(TABLAPEARSON)
cor(TABLAPEARSON)
cor(TABLAPEARSON) %>%
view()
# Cargar el paquete
library(corrplot)
# Calcular la matriz de correlación
cor_matrix <- cor(TABLAPEARSON)
# Graficar la matriz de correlación
corrplot(cor_matrix, method = "color", col = colorRampPalette(c("red", "white", "blue"))(200),
tl.cex = 0.8, tl.col = "black", addCoef.col = "black")
# Graficar la matriz de correlación
corrplot(cor_matrix, method = "color", col = colorRampPalette(c("red", "white", "green"))(200),
tl.cex = 0.8, tl.col = "black", addCoef.col = "black")
# Graficar la matriz de correlación
corrplot(cor_matrix, method = "color", col = colorRampPalette(c("#D80032", "white", "#2B2D42"))(200),
tl.cex = 0.8, tl.col = "black", addCoef.col = "black")
TABLAPEARSON_reduc<-TABLAPEARSON
cor_matrix <- cor(TABLAPEARSON_reduc)
# Graficar la matriz de correlación
corrplot(cor_matrix, method = "color", col = colorRampPalette(c("#D80032", "white", "#2B2D42"))(200),
tl.cex = 0.8, tl.col = "black", addCoef.col = "black")
TABLAPEARSON_reduc<-TABLAPEARSON %>%
select(-Densidad_pob)
cor_matrix <- cor(TABLAPEARSON_reduc)
# Graficar la matriz de correlación
corrplot(cor_matrix, method = "color", col = colorRampPalette(c("#D80032", "white", "#2B2D42"))(200),
tl.cex = 0.8, tl.col = "black", addCoef.col = "black")
# Crear una paleta de colores donde el valor 1 tenga un color distinto (verde)
col <- colorRampPalette(c("#D80032", "white", "#2B2D42"))(200)
col[length(col)] <- "black"  # El último color será verde (#00FF00) para representar la correlación 1
# Graficar la matriz de correlación
corrplot(cor_matrix, method = "color", col = colorRampPalette(c("#D80032", "white", "#2B2D42"))(200),
tl.cex = 0.8, tl.col = "black", addCoef.col = "black")
# Graficar la matriz de correlación
corrplot(cor_matrix, method = "color", col = col)(200),
tl.cex = 0.8, tl.col = "black", addCoef.col = "black")
# Graficar la matriz de correlación
corrplot(cor_matrix, method = "color", col = col,
tl.cex = 0.8, tl.col = "black", addCoef.col = "black")
# Crear una paleta de colores donde el valor 1 tenga un color distinto (verde)
col <- colorRampPalette(c("##067BC2", "white", "#2B2D42"))(200)
col[length(col)] <- "black"  # El último color será verde (#00FF00) para representar la correlación 1
# Graficar la matriz de correlación
corrplot(cor_matrix, method = "color", col = col,
tl.cex = 0.8, tl.col = "black", addCoef.col = "black")
# Crear una paleta de colores donde el valor 1 tenga un color distinto (verde)
col <- colorRampPalette(c("#067BC2", "white", "#2B2D42"))(200)
col[length(col)] <- "black"  # El último color será verde (#00FF00) para representar la correlación 1
# Graficar la matriz de correlación
corrplot(cor_matrix, method = "color", col = col,
tl.cex = 0.8, tl.col = "black", addCoef.col = "black")
# Crear una paleta de colores donde el valor 1 tenga un color distinto (verde)
col <- colorRampPalette(c("#D80032", "white", "#067BC2"))(200)
col[length(col)] <- "black"  # El último color será verde (#00FF00) para representar la correlación 1
# Graficar la matriz de correlación
corrplot(cor_matrix, method = "color", col = col,
tl.cex = 0.8, tl.col = "black", addCoef.col = "black")
# Guardar la imagen en formato PNG
png("output/correlation_plot.png", width = 800, height = 800)
# Guardar la imagen en formato PNG
png("output/correlation_plot.png", width = 800, height = 800)
# Crear el corrplot dentro del archivo PNG
corrplot(cor_matrix, method = "color", col = col,
tl.cex = 0.8, tl.col = "black", addCoef.col = "black",
is.corr = TRUE, number.cex = 0.7)
# Cerrar el dispositivo gráfico para finalizar el guardado
dev.off()
# Guardar el gráfico como imagen PNG con tamaños de texto ajustados
png("output/correlation_plot_large.png", width = 1000, height = 1000)
# Graficar el corrplot con ajustes de tamaño
corrplot(cor_matrix, method = "color", col = col,
tl.cex = 1.5,       # Tamaño del texto de los nombres de las variables
tl.col = "black",   # Color de los nombres de las variables
addCoef.col = "black",  # Color de los números de correlación
number.cex = 1.5,   # Tamaño de los números de correlación
is.corr = TRUE,
cl.cex = 1.2,       # Tamaño de la leyenda
number.digits = 2)  # Número de decimales para las correlaciones
# Cerrar el dispositivo gráfico para guardar el archivo
dev.off()
# Guardar el gráfico como imagen PNG con tamaños de texto ajustados
png("output/correlation_plot_large.png", width = 1000, height = 1000)
# Graficar el corrplot con ajustes de tamaño
corrplot(cor_matrix, method = "color", col = col,
tl.cex = 1.5,       # Tamaño del texto de los nombres de las variables
tl.col = "black",   # Color de los nombres de las variables
addCoef.col = "black",  # Color de los números de correlación
number.cex = 2,   # Tamaño de los números de correlación
is.corr = TRUE,
cl.cex = 1.2,       # Tamaño de la leyenda
number.digits = 2)  # Número de decimales para las correlaciones
# Cerrar el dispositivo gráfico para guardar el archivo
dev.off()
library(tidyverse)
library(ggplot2)
library(readxl)
library(eph)
library(corrplot)
TABLAPEARSON<-read_xlsx("datos/PEARSON_INDICADORES_2022.xlsx")
View(TABLAPEARSON)
TABLAPEARSON<-TABLAPEARSON %>%
select(-superficie_Km2,-Provincia,-Hogares,-Codigo,-Poblacion,-H_propietarios,-H_algun_nbi) %>%
rename("fertilidad"="Fecundidad")
TABLAPEARSON<-TABLAPEARSON %>%
select(-superficie_Km2,-Provincia,-Hogares,-Codigo,-Poblacion,-H_propietarios,-H_algun_nbi) %>%
rename("Fecundidad"="fertilidad")
# Calcular la matriz de correlación
cor_matrix <- cor(TABLAPEARSON)
# Graficar la matriz de correlación
corrplot(cor_matrix, method = "color", col = colorRampPalette(c("#D80032", "white", "#2B2D42"))(200),
tl.cex = 0.8, tl.col = "black", addCoef.col = "black")
# Crear una paleta de colores donde el valor 1 tenga un color distinto (verde)
col <- colorRampPalette(c("#D80032", "white", "#067BC2"))(200)
col[length(col)] <- "black"  # El último color será verde (#00FF00) para representar la correlación 1
# Cerrar el dispositivo gráfico para finalizar el guardado
dev.off()
# Guardar el gráfico como imagen PNG con tamaños de texto ajustados
png("output/correlation_plot_large.png", width = 1000, height = 1000)
# Graficar el corrplot con ajustes de tamaño
corrplot(cor_matrix, method = "color", col = col,
tl.cex = 1.5,       # Tamaño del texto de los nombres de las variables
tl.col = "black",   # Color de los nombres de las variables
addCoef.col = "black",  # Color de los números de correlación
number.cex = 2,   # Tamaño de los números de correlación
is.corr = TRUE,
cl.cex = 1.2,       # Tamaño de la leyenda
number.digits = 2)  # Número de decimales para las correlaciones
# Cerrar el dispositivo gráfico para guardar el archivo
dev.off()
# Graficar el corrplot con ajustes de tamaño
corrplot(cor_matrix, method = "color", col = col,
tl.cex = 1.5,       # Tamaño del texto de los nombres de las variables
tl.col = "black",   # Color de los nombres de las variables
addCoef.col = "black",  # Color de los números de correlación
number.cex = 2,   # Tamaño de los números de correlación
is.corr = TRUE,
cl.cex = 1.2,       # Tamaño de la leyenda
number.digits = 2)  # Número de decimales para las correlaciones
### SECCION 1: NACIDOS VIVOS ARGENTINA
options(scipen = 999)
View(TABLAPEARSON)
TABLAPEARSON<-read_xlsx("datos/PEARSON_INDICADORES_2022.xlsx")
TABLAPEARSON<-TABLAPEARSON %>%
select(-superficie_Km2,-Provincia,-Hogares,-Codigo,-Poblacion,-H_propietarios,-H_algun_nbi) %>%
rename("Fecundidad"="fertilidad")
# Calcular la matriz de correlación
cor_matrix <- cor(TABLAPEARSON)
TABLAPEARSON_reduc<-TABLAPEARSON %>%
select(-Densidad_pob)
cor_matrix <- cor(TABLAPEARSON_reduc)
# Crear una paleta de colores donde el valor 1 tenga un color distinto (verde)
col <- colorRampPalette(c("#D80032", "white", "#067BC2"))(200)
col[length(col)] <- "black"  # El último color será verde (#00FF00) para representar la correlación 1
# Cerrar el dispositivo gráfico para finalizar el guardado
dev.off()
# Guardar el gráfico como imagen PNG con tamaños de texto ajustados
png("output/correlation_plot_large.png", width = 1000, height = 1000)
# Graficar el corrplot con ajustes de tamaño
corrplot(cor_matrix, method = "color", col = col,
tl.cex = 1.5,       # Tamaño del texto de los nombres de las variables
tl.col = "black",   # Color de los nombres de las variables
addCoef.col = "black",  # Color de los números de correlación
number.cex = 2,   # Tamaño de los números de correlación
is.corr = TRUE,
cl.cex = 1.2,       # Tamaño de la leyenda
number.digits = 2)  # Número de decimales para las correlaciones
# Cerrar el dispositivo gráfico para guardar el archivo
dev.off()
library(tidyverse)
library(ggplot2)
library(readxl)
library(eph)
library(corrplot)
### SECCION 1: NACIDOS VIVOS ARGENTINA
options(scipen = 999)
#### pruebas con el logaritmo de densidad
TABLAPEARSON$LOGdensidad <- log(TABLAPEARSON$Densidad_pob)
TABLAPEARSON
cor(TABLAPEARSON$LOGdensidad,TABLAPEARSON$Fecundidad, method = "spearman")
cor(TABLAPEARSON$LOGdensidad,TABLAPEARSON$Ind_env, method = "spearman")
View(TABLAPEARSON)
plot(TABLAPEARSON$LOGdensidad,TABLAPEARSON$Ind_env)
plot(TABLAPEARSON$LOGdensidad,TABLAPEARSON$Fecundidad
plot(TABLAPEARSON$LOGdensidad,TABLAPEARSON$Fecundidad)
plot(TABLAPEARSON$LOGdensidad,TABLAPEARSON$Fecundidad)
cor(TABLAPEARSON$LOGdensidad,TABLAPEARSON$Ind_env, method = "spearman")
plot(TABLAPEARSON$LOGdensidad,TABLAPEARSON$ICV)
plot(TABLAPEARSON$LOGdensidad,TABLAPEARSON$pct_propietarios)
