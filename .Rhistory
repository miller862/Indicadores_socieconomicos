nac10<-read.csv("datos/nacweb10.csv")%>%
mutate(ANIO=2010)
nac11<-read.csv("datos/nacweb11.csv")%>%
mutate(ANIO=2011)
nac13<-read.csv("datos/nacweb13.csv")%>%
mutate(ANIO=2013)
nac12<-read.csv("datos/nacweb12.csv")%>%
mutate(ANIO=2012)
nac15<-read.csv("datos/nacweb15.csv")%>%
mutate(ANIO=2015)
nac14<-read.csv("datos/nacweb14.csv")%>%
mutate(ANIO=2014)
nac16<-read.csv("datos/nacweb16.csv")%>%
mutate(ANIO=2016)
nac17<-read.csv("datos/nacweb17.csv")%>%
mutate(ANIO=2017)
nac18<-read.csv("datos/nacweb18.csv")%>%
mutate(ANIO=2018)
nac19<-read.csv("datos/nacweb19.csv")%>%
mutate(ANIO=2019)
nac20<-read.csv("datos/nacweb20.csv",sep = ";")%>%
mutate(ANIO=2020)%>%
rename("PROVRES"="ï..PROVRES")
nac21<-read.csv("datos/nacweb21.csv",sep =";")%>%
mutate(ANIO=2021) %>%
rename("PROVRES"="ï..PROVRES")
nac22<-read.csv("datos/nacweb22.csv",sep = ";")%>%
mutate(ANIO=2022) %>%
rename("PROVRES"="ï..PROVRES")
cod_prov <- data.frame(
PROVRES = c("2", "6", "10", "14", "18", "22", "26", "30", "34", "38",
"42", "46", "50", "54", "58", "62", "66", "70", "74", "78",
"82", "86", "90", "94", "98", "99"),
PROVINCIA = c("CABA", "Buenos Aires", "Catamarca", "Córdoba",
"Corrientes", "Chaco", "Chubut", "Entre Ríos", "Formosa", "Jujuy",
"La Pampa", "La Rioja", "Mendoza", "Misiones", "Neuquén", "Río Negro",
"Salta", "San Juan", "San Luis", "Santa Cruz", "Santa Fe",
"Santiago del Estero", "Tucumán", "Tierra del Fuego", "Otro país",
"Lugar no especificado")
) %>%
mutate(PROVRES=as.integer(PROVRES))
#cCOMPILACION DE DATOS
Acumulada<-rbind(nac05,nac06)
Acumulada<-rbind(Acumulada,nac07)
Acumulada<-rbind(Acumulada,nac08)
Acumulada<-rbind(Acumulada,nac09)
Acumulada<-rbind(Acumulada,nac10)
Acumulada<-rbind(Acumulada,nac11)
Acumulada<-rbind(Acumulada,nac12)
Acumulada<-rbind(Acumulada,nac13)
Acumulada<-rbind(Acumulada,nac14)
Acumulada<-rbind(Acumulada,nac15)
Acumulada<-rbind(Acumulada,nac16)
Acumulada<-rbind(Acumulada,nac17)
Acumulada<-rbind(Acumulada,nac18)
Acumulada<-rbind(Acumulada,nac19)
Acumulada<-rbind(Acumulada,nac20)
Acumulada<-rbind(Acumulada,nac21)
todocrudo<-rbind(Acumulada,nac22)
todo<-todocrudo %>%
left_join(cod_prov, by="PROVRES") %>%
select(-TIPPARTO,-ITIEMGEST,-PROVRES)
NAC_ANUALES_ARG<-todo %>%
group_by(ANIO) %>%
summarise(TOTAL=sum(CUENTA))
NAC_ANUALES_PROV<-todo %>%
group_by(PROVINCIA,ANIO) %>%
summarise(TOTAL=sum(CUENTA))
ggplot(NAC_ANUALES_PROV, aes(x = ANIO, y = TOTAL, color = PROVINCIA, group = PROVINCIA)) +
geom_line(aes(size = ifelse(PROVINCIA %in% c("Misiones", "CABA","Buenos Aires"), 1.5, 0.5))) +
scale_size_identity() +  # Mantiene los tamaños especificados
labs(title = "Gráfico de Múltiples Líneas",
x = "Tiempo",
y = "Valor",
color = "Variables") +
theme_minimal()+
guides(color = guide_legend(ncol = 1))
NAT <- read.csv("datos/NATALIDADDEIS2000-2022.csv") %>%
rename("ANIO" = "indice_tiempo") %>%
mutate(ANIO = as.integer(substr(ANIO, 1, 4))) %>%
rename_with(~ c("ANIO", "totalARG", "CABA", "Buenos Aires", "Catamarca", "Córdoba",
"Corrientes", "Chaco", "Chubut", "Entre Ríos", "Formosa", "Jujuy",
"La Pampa", "La Rioja", "Mendoza", "Misiones", "Neuquén", "Río Negro",
"Salta", "San Juan", "San Luis", "Santa Cruz", "Santa Fe",
"Santiago del Estero", "Tucumán", "Tierra del Fuego"),
.cols = everything())
# Reestructurar el dataframe de formato "wide" a "long"
NAT_long <- NAT %>%
pivot_longer(-ANIO, names_to = "PROVINCIA", values_to = "valor")
ggplot(NAT_long, aes(x = ANIO, y = valor, color = PROVINCIA, group = PROVINCIA)) +
geom_line(aes(size = ifelse(PROVINCIA %in% c("Misiones", "CABA", "totalARG"), 1.5, 0.5))) +
scale_size_identity() +  # Mantiene los tamaños especificados
labs(title = "Gráfico de Múltiples Líneas",
x = "Tiempo",
y = "Valor",
color = "Variables") +
theme_minimal()+
guides(color = guide_legend(ncol = 1))
#MINIMO
NAT_long %>%
filter(ANIO==2000) %>%
filter(valor== min(valor))
#MAXIMO
NAT_long %>%
filter(ANIO==2000) %>%
filter(valor== max(valor))
#AÑO 2022
#MINIMO
NAT_long %>%
filter(ANIO==2022) %>%
filter(valor== min(valor))
#MINIMO
NAT_long %>%
filter(ANIO==2000) %>%
filter(valor== min(valor))
#MAXIMO
NAT_long %>%
filter(ANIO==2000) %>%
filter(valor== max(valor))
#AÑO 2022
#MINIMO
NAT_long %>%
filter(ANIO==2022) %>%
filter(valor== min(valor))
#MAXIMO
NAT_long %>%
filter(ANIO==2022) %>%
filter(valor== max(valor))
FECBM <- read_xls("datos/fecundidadBM.xls") %>%
select(-"Indicator Code",-"Country Code", -"Indicator Name")
SeleccionFECBM <-FECBM %>%
filter(`Country Name`%in% c("Argentina","Brasil","Bolivia","México","Alemania","Estados Unidos","Corea, República de", "Federación de Rusia","Mundo"))
# Reestructurar el dataframe de formato "wide" a "long"
seleccion_long <- SeleccionFECBM %>%
pivot_longer(-`Country Name`, names_to = "ANIO", values_to = "FEC") %>%
mutate(ANIO= as.integer(ANIO),
"Country Name"= as.factor(`Country Name`)) %>%
filter(ANIO != 2023)
valor_arg_2022 <- seleccion_long %>%
filter(`Country Name` == "Argentina" & ANIO == 2022) %>%
pull(FEC)
ggplot(seleccion_long, aes(x = ANIO, y = FEC, color = `Country Name`, group = `Country Name`)) +
geom_line(aes(size = ifelse(`Country Name` %in% c("Argentina", "Mundo"), 1.5, 0.5))) +
geom_hline(yintercept = valor_arg_2022, linetype = "dashed", color = "red") +  # Línea horizontal de guía
labs(title = "Gráfico de Múltiples Líneas",
x = "Tiempo",
y = "Valor",
color = "País") +
scale_x_continuous(breaks = seq(min(seleccion_long$ANIO), max(seleccion_long$ANIO), by = 10)) +  # Años de 10 en 10
scale_y_continuous(breaks = seq(floor(min(seleccion_long$FEC)), ceiling(max(seleccion_long$FEC)), by = 0.25)) +  # Incrementos de 0.25 en el eje y
scale_size_identity() +  # Mantiene los tamaños especificados
theme_minimal() +
geom_text(aes(x = 2022, y = valor_arg_2022, label = round(valor_arg_2022, 2)),
vjust = -1, color = "red")  # Añadir texto al lado de la línea
TABLAPEARSON<-read_xlsx("datos/PEARSON_INDICADORES_2022.xlsx")
TABLAPEARSON<-TABLAPEARSON %>%
select(-superficie_Km2,-Provincia,-Hogares,-Codigo,-Poblacion,-H_propietarios,-H_algun_nbi) %>%
rename("Fecundidad"="fertilidad")
glimpse(TABLAPEARSON)
View(TABLAPEARSON)
# Calcular la matriz de correlación
cor_matrix <- cor(TABLAPEARSON)
TABLAPEARSON_reduc<-TABLAPEARSON %>%
select(-Densidad_pob)
cor_matrix <- cor(TABLAPEARSON_reduc)
# Crear una paleta de colores donde el valor 1 tenga un color distinto (verde)
col <- colorRampPalette(c("#D80032", "white", "#067BC2"))(200)
col[length(col)] <- "black"  # El último color será verde (#00FF00) para representar la correlación 1
# Cerrar el dispositivo gráfico para finalizar el guardado
dev.off()
# Calcular la matriz de correlación
cor_matrix <- cor(TABLAPEARSON)
# Graficar la matriz de correlación
corrplot(cor_matrix, method = "color", col = colorRampPalette(c("#D80032", "white", "#2B2D42"))(200),
tl.cex = 0.8, tl.col = "black", addCoef.col = "black")
#### pruebas con el logaritmo de densidad
TABLAPEARSON$LOGdensidad <- log(TABLAPEARSON$Densidad_pob)
cor(TABLAPEARSON$LOGdensidad,TABLAPEARSON$Ind_env, method = "spearman")
plot(TABLAPEARSON$LOGdensidad,TABLAPEARSON$pct_propietarios)
ggplot(NAC_ANUALES_PROV, aes(x = ANIO, y = TOTAL, color = PROVINCIA, group = PROVINCIA)) +
geom_line(aes(size = ifelse(PROVINCIA %in% c("Misiones", "CABA","Buenos Aires"), 1.5, 0.5))) +
scale_size_identity() +  # Mantiene los tamaños especificados
labs(title = "Gráfico de Múltiples Líneas",
x = "Tiempo",
y = "Valor",
color = "Variables") +
theme_minimal()+
guides(color = guide_legend(ncol = 1))
#### pruebas con el logaritmo de densidad
TABLAPEARSON$LOGdensidad <- log(TABLAPEARSON$Densidad_pob)
cor(TABLAPEARSON$LOGdensidad,TABLAPEARSON$Ind_env, method = "spearman")
plot(TABLAPEARSON$LOGdensidad,TABLAPEARSON$pct_propietarios)
TABLAPEARSON<-read_xlsx("datos/PEARSON_INDICADORES_2022.xlsx")
library(tidyverse)
library(ggplot2)
library(readxl)
library(eph)
library(corrplot)
TABLAPEARSON<-read_xlsx("datos/PEARSON_INDICADORES_2022.xlsx")
TABLAPEARSON<-TABLAPEARSON %>%
select(-superficie_Km2,-Provincia,-Hogares,-Codigo,-Poblacion,-H_propietarios,-H_algun_nbi) %>%
rename("Fecundidad"="fertilidad")
glimpse(TABLAPEARSON)
# Calcular la matriz de correlación
cor_matrix <- cor(TABLAPEARSON)
TABLAPEARSON<-read_xlsx("datos/PEARSON_INDICADORES_2022.xlsx")
TABLAPEARSON<-TABLAPEARSON %>%
select(-superficie_Km2,-Provincia,-Hogares,-Codigo,-Poblacion,-H_propietarios,-H_algun_nbi) %>%
rename("Fecundidad"="fertilidad")
glimpse(TABLAPEARSON)
TABLAPEARSON$Fecundidad <- as.numeric(df$Fecundidad)
TABLAPEARSON$Fecundidad <- as.numeric(TABLAPEARSON$Fecundidad)
glimpse(TABLAPEARSON)
# Calcular la matriz de correlación
cor_matrix <- cor(TABLAPEARSON)
View(TABLAPEARSON)
# Calcular la matriz de correlación
cor_matrix <- cor(TABLAPEARSON)
TABLAPEARSON_reduc<-TABLAPEARSON %>%
select(-Densidad_pob)
cor_matrix <- cor(TABLAPEARSON_reduc)
# Crear una paleta de colores donde el valor 1 tenga un color distinto (verde)
col <- colorRampPalette(c("#D80032", "white", "#067BC2"))(200)
col[length(col)] <- "black"  # El último color será verde (#00FF00) para representar la correlación 1
# Cerrar el dispositivo gráfico para finalizar el guardado
dev.off()
# Guardar el gráfico como imagen PNG con tamaños de texto ajustados
png("output/correlation_plot_large.png", width = 1000, height = 1000)
# Graficar el corrplot con ajustes de tamaño
corrplot(cor_matrix, method = "color", col = col,
tl.cex = 1.5,       # Tamaño del texto de los nombres de las variables
tl.col = "black",   # Color de los nombres de las variables
addCoef.col = "black",  # Color de los números de correlación
number.cex = 2,   # Tamaño de los números de correlación
is.corr = TRUE,
cl.cex = 1.2,       # Tamaño de la leyenda
number.digits = 2)  # Número de decimales para las correlaciones
# Cerrar el dispositivo gráfico para guardar el archivo
dev.off()
TABLAPEARSON<-read_xlsx("datos/PEARSON_INDICADORES_2022.xlsx")
TABLAPEARSON<-read_xlsx("datos/PEARSON_INDICADORES_2022.xlsx")
TABLAPEARSON<-TABLAPEARSON %>%
select(-superficie_Km2,-Provincia,-Hogares,-Codigo,-Poblacion,-H_propietarios,-H_algun_nbi) %>%
rename("Fecundidad"="fertilidad")
TABLAPEARSON$Fecundidad <- as.numeric(TABLAPEARSON$Fecundidad)
glimpse(TABLAPEARSON)
TABLAPEARSON<-read_xlsx("datos/PEARSON_INDICADORES_2022.xlsx")
TABLAPEARSON<-TABLAPEARSON %>%
select(-superficie_Km2,-Provincia,-Hogares,-Codigo,-Poblacion,-H_propietarios,-H_algun_nbi) %>%
rename("Fecundidad"="fertilidad")
TABLAPEARSON$Fecundidad <- as.numeric(TABLAPEARSON$Fecundidad)
glimpse(TABLAPEARSON)
# Calcular la matriz de correlación
cor_matrix <- cor(TABLAPEARSON)
TABLAPEARSON_reduc<-TABLAPEARSON %>%
select(-Densidad_pob)
cor_matrix <- cor(TABLAPEARSON_reduc)
# Crear una paleta de colores donde el valor 1 tenga un color distinto (verde)
col <- colorRampPalette(c("#D80032", "white", "#067BC2"))(200)
col[length(col)] <- "black"  # El último color será verde (#00FF00) para representar la correlación 1
# Cerrar el dispositivo gráfico para finalizar el guardado
dev.off()
# Guardar el gráfico como imagen PNG con tamaños de texto ajustados
png("output/correlation_plot_large2.png", width = 1000, height = 1000)
# Graficar el corrplot con ajustes de tamaño
corrplot(cor_matrix, method = "color", col = col,
tl.cex = 1.5,       # Tamaño del texto de los nombres de las variables
tl.col = "black",   # Color de los nombres de las variables
addCoef.col = "black",  # Color de los números de correlación
number.cex = 2,   # Tamaño de los números de correlación
is.corr = TRUE,
cl.cex = 1.2,       # Tamaño de la leyenda
number.digits = 2)  # Número de decimales para las correlaciones
# Cerrar el dispositivo gráfico para guardar el archivo
dev.off()
#### pruebas con el logaritmo de densidad
TABLAPEARSON$LOGdensidad <- log(TABLAPEARSON$Densidad_pob)
cor(TABLAPEARSON$LOGdensidad,TABLAPEARSON$Ind_env, method = "spearman")
plot(TABLAPEARSON$LOGdensidad,TABLAPEARSON$pct_propietarios)
cor(TABLAPEARSON$LOGdensidad,TABLAPEARSON$Ind_env, method = "spearman")
plot(TABLAPEARSON$LOGdensidad,TABLAPEARSON$Ind_env)
cor(TABLAPEARSON$LOGdensidad,TABLAPEARSON$Fecundidad, method = "spearman")
plot(TABLAPEARSON$LOGdensidad,TABLAPEARSON$Fecundidad)
library(tidyverse)
library(rstatix)
library(readxl)
prov2022 <- read_excel("datos/provincias2022.xlsx")
View(prov2022)
prov2022 <- read_excel("datos/provincias2022.xlsx")
View(prov2022)
prov2022 <- prov2022%>% remove_rownames %>% column_to_rownames(var="Provincia")  # Con esta linea podemos nombrar cada fila con el modelo del auto
View(prov2022)
summary(clientes)
summary(prov2022)
# distribución de las variables
par(mfrow = c(1, 2))
# buscando observaciones atípicas
par(mfrow = c(1, 2))
library(scales)
# standarización de las variables
Zprov2022 <- scale(prov2022)
# gráfico de dispersión
par(mfrow = c(1, 1))
plot(Zprov2022, col = alpha("steelblue", 0.4), pch = 19, las = 1)
text(Zprov2022, rownames(Zprov2022), pos = 3, cex = .6)
prov2022 <- prov2022[, 1:(ncol(prov2022) - 5)]
# standarización de las variables
Zprov2022 <- scale(prov2022)
# gráfico de dispersión
par(mfrow = c(1, 1))
plot(Zprov2022, col = alpha("steelblue", 0.4), pch = 19, las = 1)
text(Zprov2022, rownames(Zprov2022), pos = 3, cex = .6)
d <- dist(Zprov2022, method = "euclidean")
fit <- hclust(d, method="ward.D")
plot(fit, cex = .6, xlab = "", ylab = "Distancia entre grupos", sub = "Cluster jerárquico por el método de Ward para los clientes")
View(prov2022)
scipen(999)
options(scipen=999)
View(prov2022)
prov2022 <- prov2022%>% remove_rownames %>% column_to_rownames(var="Provincia")  # Con esta linea podemos nombrar cada fila con el modelo del auto
prov2022 <- prov2022[, 1:(ncol(prov2022) - 6)]
prov2022 <- prov2022[, 1:(ncol(prov2022) - 5)]
prov2022 <- read_excel("datos/provincias2022.xlsx")
prov2022 <- prov2022[, 1:(ncol(prov2022) - 5)]
prov2022 <- read_excel("datos/provincias2022.xlsx")
prov2022 <- prov2022[, 1:(ncol(prov2022) - 6)]
describe(prov2022)
describe(prov2022)
glimpse(prov2022)
prov2022 <- prov2022%>% remove_rownames %>% column_to_rownames(var="Provincia")
summary(prov2022)
glimpse(prov2022)
# Si las provincias están como rownames
pbi_share <- prov2022 / rowSums(prov2022, na.rm = TRUE)
View(pbi_share)
# standarización de las variables
Zprov2022 <- scale(pbi_share)
# gráfico de dispersión
par(mfrow = c(1, 1))
plot(Zprov2022, col = alpha("steelblue", 0.4), pch = 19, las = 1)
text(Zprov2022, rownames(Zprov2022), pos = 3, cex = .6)
d <- dist(Zprov2022, method = "euclidean")
fit <- hclust(d, method="ward.D")
plot(fit, cex = .6, xlab = "", ylab = "Distancia entre grupos", sub = "Cluster jerárquico por el método de Ward para los clientes")
library(RColorBrewer)
plot(fit, cex = .6, xlab = "", ylab = "Distancia entre grupos", sub = "Cluster jerárquico por el método de Ward para los clientes")
# standarización de las variables
Zprov2022 <- scale(pbi_share)
d <- dist(Zprov2022, method = "euclidean")
fit <- hclust(d, method="ward.D")
plot(fit, cex = .6, xlab = "", ylab = "Distancia entre grupos", sub = "Cluster jerárquico por el método de Ward provincias")
Numgrupos <- 3
Numgrupos <- 3
library(RColorBrewer)
plot(fit, cex = .6, xlab = "", ylab = "Distancia entre grupos", sub = "Cluster jerárquico por el método de Ward para los clientes")
rect.hclust(fit, k = 3, border = brewer.pal(Numgrupos, "Dark2"))
rect.hclust(fit, k = 5, border = brewer.pal(Numgrupos, "Dark2"))
plot(fit, cex = .6, xlab = "", ylab = "Distancia entre grupos", sub = "Cluster jerárquico por el método de Ward provincias")
plot(fit, cex = .6, xlab = "", ylab = "Distancia entre grupos", sub = "Cluster jerárquico por el método de Ward para los clientes")
rect.hclust(fit, k = 5, border = brewer.pal(Numgrupos, "Dark2"))
grupos3 <- cutree(fit, k = 3)
grupos3
grupos5 <- cutree(fit, k = 5)
grupos5
prov2022$GRUPO <- factor(grupos5)
palette(brewer.pal(Numgrupos, "Dark2"))
grupos3 <- cutree(fit, k = 3)
grupos3
grupos5 <- cutree(fit, k = 5)
grupos5
pbi_share$GRUPO <- factor(grupos5)
palette(brewer.pal(Numgrupos, "Dark2"))
colnames(pbi_share)
plot('Salud pública' ~ 'Salud privada', col = alpha(GRUPO, 0.75), pch = 19, data = pbi_share, las = 1)
plot(Salud pública ~ Salud privada, col = alpha(GRUPO, 0.75), pch = 19, data = pbi_share, las = 1)
plot(`Salud pública` ~ `Salud privada`, col = colores, pch = 19, data = pbi_share, las = 1)
colores<-palette(brewer.pal(Numgrupos, "Dark2"))
plot(`Salud pública` ~ `Salud privada`, col = colores, pch = 19, data = pbi_share, las = 1)
Data.km <- kmeans(Zprov2022, Numgrupos,5)
Data.km
Numgrupos <- 5
Data.km <- kmeans(Zprov2022, Numgrupos,5)
Data.km
pbi_share %>%
group_by(GRUPO) %>%
get_summary_stats(type="mean_sd")
clientes %>% anova_test(`Elaboración de productos alimenticios y bebidas`~GRUPO)
pbi_share %>% anova_test(`Elaboración de productos alimenticios y bebidas`~GRUPO)
# Asumimos que 'GRUPO' es la columna a usar como factor
pbi_share %>%
select(-GRUPO) %>%
map_df(~ anova_test(data = pbi_share, formula = .x ~ GRUPO), .id = "Variable")
# Obtener nombres de variables excepto GRUPO
variables <- names(pbi_share)[names(pbi_share) != "GRUPO"]
# Aplicar anova_test a cada variable contra GRUPO
resultados_anova <- map_df(
variables,
~ anova_test(data = pbi_share, formula = as.formula(paste(.x, "~ GRUPO"))) %>%
mutate(Variable = .x),
.id = NULL
)
# Ver resultados ordenados por significancia
resultados_anova <- resultados_anova %>% arrange(p)
# Obtener nombres de variables excepto GRUPO
variables <- names(pbi_share)[names(pbi_share) != "GRUPO"]
# Función robusta para armar la fórmula
resultados_anova <- map_df(
variables,
~ {
formula_txt <- paste0("`", .x, "` ~ GRUPO")
anova_test(data = pbi_share, formula = as.formula(formula_txt)) %>%
mutate(Variable = .x)
}
)
variables <- names(pbi_share)[names(pbi_share) != "GRUPO"]
resultados_anova <- map_df(
variables,
~ {
formula_txt <- paste0("`", .x, "` ~ GRUPO")
anova_test(data = pbi_share, formula = as.formula(formula_txt)) %>%
as.data.frame() %>%
mutate(Variable = .x)
}
)
variables <- names(pbi_share)[names(pbi_share) != "GRUPO"]
# Recolectamos los resultados en una lista primero
resultados_lista <- map(
variables,
~ {
formula_txt <- paste0("`", .x, "` ~ GRUPO")
resultado <- anova_test(data = pbi_share, formula = as.formula(formula_txt))
resultado$Variable <- .x
resultado
}
)
# Luego los combinamos en un solo dataframe
resultados_anova <- bind_rows(resultados_lista)
# Recolectamos los resultados en una lista primero
resultados_lista <- map(
variables,
~ {
formula_txt <- paste0("`", .x, "` ~ GRUPO")
resultado <- anova_test(data = pbi_share, formula = as.formula(formula_txt))
resultado$Variable <- .x
resultado
}
)
# Luego los combinamos en un solo dataframe
resultados_anova <- bind_rows(resultados_lista)
variables <- names(pbi_share)[names(pbi_share) != "GRUPO"]
resultados_lista <- map(
variables,
~ {
formula_txt <- paste0("`", .x, "` ~ GRUPO")
resultado <- anova_test(data = pbi_share, formula = as.formula(formula_txt))
resultado <- as.data.frame(resultado)  # fuerza a data.frame plano
resultado$Variable <- .x
return(resultado)
}
)
resultados_anova <- bind_rows(resultados_lista)
View(resultados_lista)
variables <- names(pbi_share)[names(pbi_share) != "GRUPO"]
# Crear lista de resultados y forzar cada uno a data.frame base
resultados_lista <- map(
variables,
~ {
formula_txt <- paste0("`", .x, "` ~ GRUPO")
res <- anova_test(data = pbi_share, formula = as.formula(formula_txt))
df <- as.data.frame(res)
df$Variable <- .x
df
}
)
# Convertir lista de data.frames en uno solo
resultados_anova <- do.call(rbind, resultados_lista)
View(resultados_anova)
resultados_anova %>%
arrange(-p)
resultados_anova %>%
arrange(-p) %>%
view(.)
resultados_anova %>%
arrange(-p) %>%
view(.)
resultados_anova %>%
arrange(-"p") %>%
view(.)
resultados_anova %>%
arrange(p) %>%
view(.)
# Convertir lista de data.frames en uno solo
resultados_anova <- do.call(rbind, resultados_lista)
View(resultados_anova)
resultados_anova %>%
mutate(p = as.numeric(p)) %>%
arrange(desc(p)) %>%
View()
resultados_anova_clean <- resultados_anova
class(resultados_anova_clean) <- "data.frame"  # Eliminar clases especiales
resultados_anova_clean %>%
mutate(p = as.numeric(p)) %>%
arrange(desc(p)) %>%
View()
resultados_anova_clean %>%
mutate(p = as.numeric(p)) %>%
arrange(asc(p)) %>%
View()
resultados_anova_clean %>%
mutate(p = as.numeric(p)) %>%
arrange(p) %>%
View()
